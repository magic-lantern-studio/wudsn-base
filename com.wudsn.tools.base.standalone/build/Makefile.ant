<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="create_standalone_executables" name="Create Runnable Jars with Jar-in-Jar Loader">
	<!-- The .jar file with the jarbundler task must be add in the ANT path in the preferences  -->
	<taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" />

	<!-- ANT 1.7 is required  -->
	<target name="create_standalone_executables">

		<fail unless="applicationName" />
		<fail unless="applicationNameLowerCase" />
		<fail unless="applicationTitle" />
		<fail unless="applicationSupportURL" />
		<fail unless="applicationMainClass" />

		<!--It requires the "releaseYears", "release" (x.y.z format) and the "version" information passed as properties. -->
		<fail unless="releaseYears" />
		<fail unless="release" />
		<fail unless="version" />

		<echo message="Creating version '${version}' of release ${release} of '${applicationName}' in ${releaseYears} by ${authors}." />

		<mkdir dir="../out" />

		<antcall target="create_platform_jar">
			<param name="platform" value="linux-x86" />
			<param name="platform_text" value="Linux - x86 (32-bit)" />
		</antcall>
		<antcall target="create_platform_jar">
			<param name="platform" value="linux-x86_64" />
			<param name="platform_text" value="Linux - x86 (64-bit)" />
		</antcall>
		<antcall target="create_platform_jar">
			<param name="platform" value="macos-x86" />
			<param name="platform_text" value="Mac OS - x86 (32-bit)" />
		</antcall>
		<antcall target="create_platform_jar">
			<param name="platform" value="macos-x86_64" />
			<param name="platform_text" value="Mac OS - x86 (64-bit)" />
		</antcall>
		<antcall target="create_platform_jar">
			<param name="platform" value="win32-x86" />
			<param name="platform_text" value="Windows - x86 (32-bit)" />
		</antcall>
		<antcall target="create_platform_jar">
			<param name="platform" value="win32-x86_64" />
			<param name="platform_text" value="Windows - x86 (64-bit)" />
		</antcall>

		<!-- Create exe wrappers/scripts -->

		<!-- Copy Linux shell script -->
		<antcall target="create_linux_script">
			<param name="platform" value="linux-x86" />
			<param name="jreRuntimeBits" value="32" />
		</antcall>
		<antcall target="create_linux_script">
			<param name="platform" value="linux-x86_64" />
			<param name="jreRuntimeBits" value="64" />
		</antcall>

		<!-- Create Mac OS X app folder -->
		<antcall target="create_macos_app">
			<param name="platform" value="macos-x86" />
			<param name="jreRuntimeBits" value="32" />
		</antcall>
		<antcall target="create_macos_app">
			<param name="platform" value="macos-x86_64" />
			<param name="jreRuntimeBits" value="64" />
		</antcall>

		<!-- Create Windows executable -->
		<antcall target="create_windows_executable">
			<param name="platform" value="win32-x86" />
			<param name="jreRuntimeBits" value="32" />
		</antcall>
		<antcall target="create_windows_executable">
			<param name="platform" value="win32-x86_64" />
			<param name="jreRuntimeBits" value="64" />
		</antcall>

		<!-- Remove jars that have been wrapped before zipping -->
		<delete file="../out/linux-x86/${applicationName}.jar" failonerror="true" />
		<delete file="../out/linux-x86_64/${applicationName}.jar" failonerror="true" />
		<delete file="../out/macos-x86/${applicationName}.jar" failonerror="true" />
		<delete file="../out/macos-x86_64/${applicationName}.jar" failonerror="true" />
		<delete file="../out/win32-x86/${applicationName}.jar" failonerror="true" />
		<delete file="../out/win32-x86_64/${applicationName}.jar" failonerror="true" />

		<!-- Create zip files for upload -->
		<antcall target="create_platform_tar_gz">
			<param name="platform" value="linux-x86" />
		</antcall>
		<antcall target="create_platform_tar_gz">
			<param name="platform" value="linux-x86_64" />
		</antcall>
		<antcall target="create_platform_tar_gz">
			<param name="platform" value="macos-x86" />
		</antcall>
		<antcall target="create_platform_tar_gz">
			<param name="platform" value="macos-x86_64" />
		</antcall>
		<antcall target="create_platform_zip">
			<param name="platform" value="win32-x86" />
		</antcall>
		<antcall target="create_platform_zip">
			<param name="platform" value="win32-x86_64" />
		</antcall>

	</target>

	<target name="create_platform_jar">
		<fail unless="applicationBinFolder" />

		<echo message="Creating '${platform_text}' as ${platform}." />
		<!-- TODO -->
		<echo message="${platform_text}" file="..\..\javahexeditor\bin\net\sourceforge\javahexeditor\Manager.os" />
		<mkdir dir="../out/${platform}" />
		<delete file="../out/${platform}/${applicationName}.jar" />
		<jar destfile="../out/${platform}/${applicationName}.jar">
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Main-Class" value="${applicationMainClass}" />
				<attribute name="Rsrc-Class-Path" value="./ org.eclipse.equinox.common.jar org.eclipse.osgi.jar swt.jar" />
			</manifest>
			<zipfileset src="../lib/jar-in-jar-loader.zip" />
			<fileset dir="${applicationBinFolder}" />
			<fileset dir="../bin" />
			<zipfileset dir="../lib" includes="org.eclipse.equinox.common.jar" />
			<zipfileset dir="../lib" includes="org.eclipse.osgi.jar" />
			<zipfileset dir="../lib/${platform}" includes="swt.jar" />
		</jar>
	</target>

	<target name="create_linux_script">
		<echo message="Creating executable for ${platform}, JRE ${jreMinVersion} (${jreRuntimeBits}-bit)" />
		<concat destfile="../out/${platform}/${applicationName}" binary="yes">
			<fileset file="../build/linux/stub.sh" />
			<fileset file="../out/${platform}/${applicationName}.jar" />
		</concat>
	</target>

	<target name="create_macos_app">
		<echo message="Creating executable for ${platform}, JRE ${jreMinVersion} (${jreRuntimeBits}-bit)" />

		<fail unless="platform" />
		<fail unless="iconFilePath" />

		<property name="jarFile" value="../out/${platform}/${applicationName}.jar" />
		<property name="appDir" value="../out/${platform}/${applicationName}.app" />

		<mkdir dir="${appDir}" />
		<move file="${jarFile}" todir="${appDir}" />
		<!-- See the jarbundler documentation for details on the task -->
		<!-- The ".icns" file was created using http://iconverticons.com/online -->
		<jarbundler dir="../out/${platform}/" name="${applicationName}" copyright="(C) ${releaseYears} ${authors}" shortname="${applicationTitle}" build="${version}" icon="${iconFilePath}" useJavaXKey="true" mainclass="${applicationMainClass}" jar="${jarFile}" jvmversion="${jreMinVersion}+" vmoptions="-Xms256M -Xmx256M">
		</jarbundler>
		<copy todir="../out/${platform}/${applicationName}.app/Contents/MacOS" overwrite="true">
			<fileset file="./macos/universalJavaApplicationStub" />
		</copy>
	</target>

	<target name="create_windows_executable">
		<echo message="Creating executable for ${platform}, JRE ${jreMinVersion} (${jreRuntimeBits}-bit)" />

		<fail unless="basedir" />
		<fail unless="applicationName" />
		<fail unless="applicationTitle" />
		<fail unless="applicationSupportURL" />

		<fail unless="authors" />
		<fail unless="releaseYears" />
		<fail unless="release" />
		<fail unless="version" />
		<fail unless="platform" />

		<fail unless="jreMinVersion" />
		<fail unless="jreRuntimeBits" />


		<property name="xml" value="Launch4j.xml" />
		<property name="applicationFolder" value="${basedir}\.." />
		<property name="applicationExecutableName" value="${applicationName}.exe" />

		<copy todir="../out">
			<fileset file="windows/${xml}" />
			<filterset>
				<filter token="APPLICATION_HEADER_TYPE" value="${applicationHeaderType}" />
				<filter token="APPLICATION_NAME" value="${applicationName}" />
				<filter token="APPLICATION_TITLE" value="${applicationTitle}" />
				<filter token="APPLICATION_SUPPORT_URL" value="${applicationSupportURL}" />
				<filter token="AUTHORS" value="${authors}" />
				<filter token="RELEASE_YEARS" value="${releaseYears}" />
				<filter token="RELEASE" value="${release}" />
				<filter token="VERSION" value="${version}" />
				<filter token="PLATFORM_ID" value="${platform}" />
				<filter token="JRE_MIN_VERSION" value="${jreMinVersion}" />
				<filter token="JRE_RUNTIME_BITS" value="${jreRuntimeBits}" />
				<filter token="JAR_FILE_PATH" value="${applicationFolder}\out\${platform}\${applicationName}.jar" />
				<filter token="ICON_FILE_PATH" value="${applicationFolder}\icons\application.ico" />
				<filter token="OUT_FILE_PATH" value="${applicationFolder}\out\${platform}\${applicationExecutableName}" />
				<filter token="ORIGINAL_FILENAME" value="${applicationExecutableName}" />
			</filterset>
		</copy>

		<exec executable="C:\jac\system\Java\Tools\RUN\launch4j\launch4jc.exe">
			<arg value="../out/${xml}" />
		</exec>
		<delete file="../out/${xml}" />
	</target>

	<target name="create_platform_zip">
		<fail unless="applicationNameLowerCase" />
		<fail unless="platform" />

		<property name="platformZipFile" value="../out/${applicationNameLowerCase}-${platform}.zip" />
		<echo message="Creating platform archive ${platformZipFile}" />
		<delete file="${platformZipFile}" />

		<zip destfile="${platformZipFile}" basedir="../out/${platform}" />

		<delete dir="../out/${platform}" />
	</target>

	<!-- ZIP code and source from Eclipse workspace to "out" folder.
	     The regular "zip" task cannot preserve the executable flags for Unix, therefore we use a "tar "
	-->
	<target name="create_platform_tar_gz">
		<fail unless="applicationNameLowerCase" />
		<fail unless="platform" />

		<property name="platformZipFile" value="../out/${applicationNameLowerCase}-${platform}.tar.gz" />
		<echo message="Creating platform archive ${platformZipFile}" />
		<delete file="${platformZipFile}" />

		<tar destfile="${platformZipFile}" compression="gzip">
			<tarfileset dir="../out/${platform}" filemode="755">
				<include name="*" />
			</tarfileset>
		</tar>

		<delete dir="../out/${platform}" />
	</target>
</project>
